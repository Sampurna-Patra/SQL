Here is the breakdown of the SQL queries for the assignments:

1.List of all customers

SELECT * FROM Customers;

2.List of all customers where company name ending in N

SELECT * FROM Customers WHERE CompanyName LIKE '%N';

3.List of all customers who live in Berlin or London

SELECT * FROM Customers WHERE City IN ('Berlin', 'London');

4.List of all customers who live in UK or USA

SELECT * FROM Customers WHERE Country IN ('UK', 'USA');

5.List of all products sorted by product name

SELECT * FROM Products ORDER BY ProductName;

6.List of all products where product name starts with an A

SELECT * FROM Products WHERE ProductName LIKE 'A%';

7.List of customers who ever placed an order

SELECT DISTINCT c.* 
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID;

8.List of Customers who live in London and have bought chai

SELECT DISTINCT c.*
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
WHERE c.City = 'London' AND p.ProductName = 'Chai';

9.List of customers who never place an order

SELECT * FROM Customers 
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);

10.List of customers who ordered Tofu

SELECT DISTINCT c.*
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
WHERE p.ProductName = 'Tofu';

11.Details of first order of the system

SELECT TOP 1 *
FROM Orders
ORDER BY OrderDate;

12.Find the details of the most expensive order date

SELECT TOP 1 o.OrderDate, SUM(od.UnitPrice * od.Quantity) as TotalPrice
FROM Orders o
JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY o.OrderDate
ORDER BY TotalPrice DESC;

13.For each order get the OrderID and Average quantity of items in that order

SELECT OrderID, AVG(Quantity) as AvgQuantity
FROM OrderDetails
GROUP BY OrderID;

14.For each order get the orderID, minimum quantity, and maximum quantity for that order

SELECT OrderID, MIN(Quantity) as MinQuantity, MAX(Quantity) as MaxQuantity
FROM OrderDetails
GROUP BY OrderID;

15.Get a list of all managers and total number of employees who report to them

SELECT m.ManagerID, m.LastName, COUNT(e.EmployeeID) as NumberOfReports
FROM Employees e
JOIN Employees m ON e.ReportsTo = m.EmployeeID
GROUP BY m.ManagerID, m.LastName;

16.Get the OrderID and the total quantity for each order that has a total quantity of greater than 300

SELECT OrderID, SUM(Quantity) as TotalQuantity
FROM OrderDetails
GROUP BY OrderID
HAVING SUM(Quantity) > 300;

17.List of all orders placed on or after 1996/12/31

SELECT * FROM Orders
WHERE OrderDate >= '1996-12-31';

18.List of all orders shipped to Canada

SELECT * FROM Orders
WHERE ShipCountry = 'Canada';

19.List of all orders with order total > 200

SELECT OrderID
FROM OrderDetails
GROUP BY OrderID
HAVING SUM(UnitPrice * Quantity) > 200;

20.List of countries and sales made in each country

SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity) as TotalSales
FROM Orders o
JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY ShipCountry;

21.List of Customer ContactName and number of orders they placed

SELECT c.ContactName, COUNT(o.OrderID) as NumberOfOrders
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName;

22.List of customer contact names who have placed more than 3 orders

SELECT c.ContactName
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName
HAVING COUNT(o.OrderID) > 3;

23.List of discontinued products which were ordered between 1/1/1997 and 1/1/1998

SELECT DISTINCT p.*
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
JOIN Orders o ON od.OrderID = o.OrderID
WHERE p.Discontinued = 1 AND o.OrderDate BETWEEN '1997-01-01' AND '1998-01-01';

24.List of employee firstname, lastname, supervisor firstname, lastname

SELECT e.FirstName as EmployeeFirstName, e.LastName as EmployeeLastName, 
       s.FirstName as SupervisorFirstName, s.LastName as SupervisorLastName
FROM Employees e
JOIN Employees s ON e.ReportsTo = s.EmployeeID;

25.List of employees id and total sale conducted by employee

SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity) as TotalSales
FROM Employees e
JOIN Orders o ON e.EmployeeID = o.EmployeeID
JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID;

26.List of employees whose FirstName contains character a

SELECT * FROM Employees
WHERE FirstName LIKE '%a%';

27.List of managers who have more than four people reporting to them

SELECT e.EmployeeID, e.FirstName, e.LastName
FROM Employees e
JOIN Employees e2 ON e.EmployeeID = e2.ReportsTo
GROUP BY e.EmployeeID, e.FirstName, e.LastName
HAVING COUNT(e2.EmployeeID) > 4;

28.List of Orders and ProductNames

SELECT o.OrderID, p.ProductName
FROM Orders o
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID;

29.List of orders place by the best customer

SELECT TOP 1 WITH TIES o.*
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY o.CustomerID
ORDER BY COUNT(o.OrderID) DESC;

30.List of orders placed by customers who do not have a Fax number

SELECT o.*
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE c.Fax IS NULL;

31.List of Postal codes where the product Tofu was shipped

SELECT DISTINCT o.ShipPostalCode
FROM Orders o
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
WHERE p.ProductName = 'Tofu';

32.List of product Names that were shipped to France

SELECT DISTINCT p.ProductName
FROM Orders o
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
WHERE o.ShipCountry = 'France';

33.List of ProductNames and Categories for the supplier 'Speciality Biscuits, Ltd.'


SELECT p.ProductName, c.CategoryName
FROM Products p
JOIN Categories c ON p.CategoryID = c.CategoryID
JOIN Suppliers s ON p.SupplierID = s.SupplierID
WHERE s.CompanyName = 'Speciality Biscuits, Ltd.';

34.List of products that were never ordered

SELECT p.*
FROM Products p
LEFT JOIN OrderDetails od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;

35.List of products where units in stock is less than 10 and units on order are 0

SELECT *
FROM Products
WHERE UnitsInStock < 10 AND UnitsOnOrder = 0;

36.List of top 10 customers by sales

SELECT TOP 10 c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity) as TotalSales
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalSales DESC;

37.Number of orders each employee has taken for customers with CustomerIDs between A and AO

SELECT e.EmployeeID, COUNT(o.OrderID) as NumberOfOrders
FROM Employees e
JOIN Orders o ON e.EmployeeID = o.EmployeeID
WHERE o.CustomerID BETWEEN 'A' AND 'AO'
GROUP BY e.EmployeeID;

38.Order date of most expensive order

SELECT TOP 1 o.OrderDate, SUM(od.UnitPrice * od.Quantity) as TotalPrice
FROM Orders o
JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY o.OrderDate
ORDER BY TotalPrice DESC;

39.Product name and total revenue from that product

SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity) as TotalRevenue
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.ProductName;

40.SupplierID and number of products offered

SELECT SupplierID, COUNT(ProductID) as NumberOfProducts
FROM Products
GROUP BY SupplierID;

41.Top ten customers based on their business

SELECT TOP 10 c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity) as TotalSales
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalSales DESC;

42.What is the total revenue of the company

SELECT SUM(od.UnitPrice * od.Quantity) as TotalRevenue
FROM OrderDetails od;
These queries should be run against the Advent


